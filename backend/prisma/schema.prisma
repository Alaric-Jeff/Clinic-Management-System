// This is your Prisma schema file
// Learn more at: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- ENUMS ----------------

// Roles for staff accounts
enum Role {
  admin
  encoder
}

// Patient gender
enum Gender {
  male
  female
}

// Categories for lab services
enum ServiceCategory {
  hematology
  bacteriology
  clinical_microscopy
  twenty_four_hour_urine_test
  serology_immunology
  clinical_chemistry
  electrolytes
  vaccine
  histopathology
  to_be_read_by_pathologist
  tumor_markers
  thyroid_function_test
  hormones
  hepatitis
  enzymes
  others
}

// Status for accounts
enum AccountStatus {
  activated
  deactivated
  pending
}

// Status for medical documentation progress
enum DocumentationStatus {
  complete
  incomplete
  draft
}

// ---------------- MODELS ----------------

model Account {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  middleName   String?       @default("N/A")
  email        String        @unique
  password     String
  role         Role          @default(encoder)
  status       AccountStatus @default(pending)
  
  // Relations
  medicalDocumentations MedicalDocumentation[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("accounts")
  @@index([email])
  @@index([role])
  @@index([status])
}

model Doctors {
  id String @id @default(cuid())
  firstName String
  lastName String
  middleInitial String?
  medicalDocumentations MedicalDocumentation[] // Relation to medical docs
}

model Patient {
  id                  String    @id @default(cuid())
  firstName           String
  lastName            String
  middleName          String?   @default("N/A")
  birthDate           DateTime
  gender              Gender    // ✅ Added gender enum
  csdIdOrPwdId        String?
  mobileNumber        String?
  residentialAddress  String?
  isArchived          Boolean   @default(false)
  
  // Denormalized audit fields only (no relations needed!)
  createdByName       String   
  updatedByName       String?    
  createdByRole       Role     
  updatedByRole       Role?   
  
  medicalDocumentations MedicalDocumentation[] //this could be null
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("patients")
  @@index([isArchived])
  @@index([createdAt])
  @@index([lastName])
  @@index([gender])   
}

model Service {
  id              String          @id @default(cuid())
  name            String          @unique
  category        ServiceCategory
  price           Float
  isActivated     Boolean         @default(true)
  isAvailable     Boolean         @default(true)
  
  createdByName   String?        
  updatedByName   String?      
  createdByRole   Role?     
  updatedByRole   Role?       
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("services")
  @@index([category])
  @@index([isActivated])
  @@index([name])
}

model MedicalDocumentation {
  id           String   @id @default(cuid())
  patientId    String
  createdById  String
  admittedById String? 
  
  subjective   String?
  objective    String?
  assessment   String?
  prescription String?
  
  status       DocumentationStatus @default(draft)
  
  patient      Patient @relation(fields: [patientId], references: [id])
  creator      Account @relation(fields: [createdById], references: [id])
  admittedBy   Doctors? @relation(fields: [admittedById], references: [id]) // Doctor relation

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("medical_documentations")
  @@index([patientId])
  @@index([createdById])
  @@index([admittedById]) 
  @@index([status])
}

model ServicesProvided {
  id String @id @default(cuid())
  
}

model MedicalBills {
  id String @id @default(cuid())


  createdByName String
  createdByRole Role
  lastUpdatedByName String?
  lastUpdateByRole Role?

}

// ---------------- DOCUMENTATION NOTES ----------------
/*
- Medical documentation should not be updated after creation for audit trail.
  (ENFORCE in app layer or DB triggers — Prisma does not natively support immutability)

- At least one field (subjective, objective, assessment, or prescription) must be filled.
  (ENFORCE in app layer with validation OR via a Postgres CHECK constraint)

- Patient records are never deleted, only archived (isArchived flag).

- Accounts start as pending and must be activated before use.

- Services have unique names, can be activated/deactivated, and tied to categories for analytics.

- Patient audit trail uses denormalized fields for performance (no Account relations needed).

- Services are standalone entities with denormalized audit fields for performance.

- Gender field added for patient demographics and reporting.
*/