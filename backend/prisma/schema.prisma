// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  encoder
}

enum ServiceCategory {
  hematology
  bacteriology
  clinical_microscopy
  twenty_four_hour_urine_test
  serology_immunology
  clinical_chemistry
  electrolytes
  vaccine
  histopathology
  to_be_read_by_pathologist
  tumor_markers
  thyroid_function_test
  hormones
  hepatitis
  enzymes
  others
}

enum AccountStatus {
  activated
  deactivated
  pending
}

model Account {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  middleName   String?       @default("N/A")
  email        String        @unique
  password     String
  role         Role          @default(encoder)
  status       AccountStatus @default(pending)
  
  // Relations
  createdPatients    Patient[] @relation("PatientCreator")
  updatedPatients    Patient[] @relation("PatientUpdater")
  createdServices    Service[] @relation("ServiceCreator")
  updatedServices    Service[] @relation("ServiceUpdater")
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("accounts") // Explicit table name
  @@index([email])
  @@index([role])
  @@index([status])
}

model Patient {
  id                  String    @id @default(cuid())
  firstName           String
  lastName            String
  middleName          String?   @default("N/A")
  birthDate           DateTime
  csdIdOrPwdId        String?
  mobileNumber        String?
  residentialAddress  String?
  isArchived          Boolean   @default(false)
  
  // Relations - can be created/updated by any role
  createdById         String
  updatedById         String
  creator             Account   @relation("PatientCreator", fields: [createdById], references: [id])
  updater             Account   @relation("PatientUpdater", fields: [updatedById], references: [id])
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("patients") // Explicit table name
  @@index([createdById])
  @@index([updatedById])
  @@index([isArchived])
}

model Service {
  id              String          @id @default(cuid())
  name            String          @unique
  category        ServiceCategory
  price           Float
  isActivated     Boolean         @default(true)
  isAvailable     Boolean         @default(true)
  
  // Relations - Services can only be updated by admin
  createdById     String
  updatedById     String
  creator         Account         @relation("ServiceCreator", fields: [createdById], references: [id])
  updater         Account         @relation("ServiceUpdater", fields: [updatedById], references: [id])
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("services") // Explicit table name
  @@index([category])
  @@index([isActivated])
  @@index([name])
}